/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.smvitm.cnlab;

import java.util.Scanner;
public class BellmanDemoFinal {
    static Scanner in=new Scanner(System.in);
public static void main(String[] args)
{
    int V,e=1,chckNegative=0;
    int w[][]=new int[20][20];
    int edge[][]=new int[50][2];
    System.out.println("enter the number of vertices");
    V=in.nextInt();
    System.out.println("enter the wight matrix");
    for(int i=1;i<=V;i++)
        for(int j=1;j<=V;j++)
        {
            w[i][j]=in.nextInt();
            if(w[i][j]!=0)
            {
                edge[e][0]=i;
                edge[e++][1]=j;
            }
        }
    chckNegative=bellmanFord(w,V,e,edge);
    if(chckNegative==1)
        System.out.println("\nno negative weight cycle\n");
    else
        System.out.println("\nnegative weight cycle exist");
            }
public static int bellmanFord(int w[][],int V,int e,int edge[][])
{
    int i, u,v,k,s,flag=1;
    int distance[]=new int[20];
    int parent[]=new int[20];
    for(i=1;i<=V;i++)
    {
        distance[i]=999;
        parent[i]=-1;
    }
    System.out.println("Enter source vertex");
    s=in.nextInt();
    distance[s]=0;
    for( i=1;i<=V-1;i++)
    {
        for(k=1;k<=e;k++)
        {
            u=edge[k][0];
            v=edge[k][1];
            if(distance[u]+w[u][v]<distance[v])
            {
                distance[v]=distance[u]+w[u][v];
                parent[v]=u;
            }
        }
    }
    for(k=1;k<=e;k++)
    {
        u=edge[k][0];
        v=edge[k][1];
        if(distance[u]+w[u][v]<distance[v])
            flag=0;
    }
    if(flag==1)
        for(i=1;i<=V;i++)
            System.out.println("vertex"+i+"-->cost="+distance[i]+"parent"+parent[i]);
      return flag;
    }
}
    


